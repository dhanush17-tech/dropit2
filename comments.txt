
// router.get("/getInfo", async (req, res) => {
//   try {
//     const { title, buyLink } = req.query;

//     const searchUrl = `https://www.amazon.in/s?k=${title}&crid=232C26IU722R5&sprefix=m%2Caps%2C295&ref=nb_sb_noss_2`;
//     const searchResponse = await axios.get(searchUrl, {
//       headers: {
//         "User-Agent":
//           "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36",
//         Accept:
//           "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
//         "Accept-Encoding": "gzip, deflate, br",
//         "Accept-Language": "en-US,en;q=0.9",
//       },
//     });

//     const $ = cheerio.load(searchResponse.data);
//     const shelves = [];
//     const productElements = $(".s-result-item").slice(2, 3);

//     await Promise.all(
//       productElements.map(async (i, productElement) => {
//         const shelf = $(productElement);
//         const images = [];
//         const imageElements = shelf.find("img.s-image");
//         imageElements.each((j, imageElement) => {
//           const image = $(imageElement).attr("src") || "";
//           images.push(image);
//         });

//         const totalReviewsElement = shelf.find(
//           "div.a-section.a-spacing-none.a-spacing-top-micro > div.a-row.a-size-small > span:last-child"
//         );
//         const totalReviews = totalReviewsElement.attr("aria-label") || "";

//         const starsElement = shelf.find(
//           "div.a-section.a-spacing-none.a-spacing-top-micro > div > span"
//         );
//         const stars = starsElement.attr("aria-label") || "";

//         const productTitleElement = shelf.find(
//           "span.a-size-base-plus.a-color-base.a-text-normal"
//         );
//         const productTitle = productTitleElement.text() || "";

//         let modifiedBuyLink = buyLink; // Store the original buyLink to prevent mutation
//         if (buyLink.includes("pricebefore.com")) {
//           const buyLinkResponse = await axios.get(buyLink);
//           const p = cheerio.load(buyLinkResponse.data);
//           modifiedBuyLink = p(".buy-button a").attr("href") || "";
//         }

//         const link = shelf.find("a.a-link-normal.a-text-normal").attr("href");
//         const amazonLink = link ? `https://amazon.in${link}` : "";

//         const element = {
//           images,
//           buyLink: modifiedBuyLink,
//           amazonLink,
//         };

//         if (totalReviews) {
//           element.totalReviews = totalReviews;
//         }

//         if (stars) {
//           element.ratings = stars.replace("out of 5 stars", "").trim();
//         }

//         shelves.push(element);
//       })
//     );

//     res.json(shelves);
//   } catch (error) {
//     console.error(error);
//     res.status(500).json({ error: "Internal server error" });
//   }
// });

// router.get("/getDescription", async (req, res) => {
//   const { amazonLink } = req.body; // Use req.query instead of req.body to retrieve the query parameter

//   console.log(amazonLink);
//   console.log("Fetching Description...");

//   try {
//     const descriptionResponse = await axios.get(amazonLink, config);
//     const $$ = cheerio.load(descriptionResponse.data);
//     const description = $$("#feature-bullets")
//       .text()
//       .replace("About this item", "")
//       .replace("Show More", "")
//       .replace(/\s\s+/g, " ")
//       .trim();
//     console.log("This is description", description);

//     res.json({
//       description: description,

//       //images: images
//     });
//   } catch (error) {
//     console.error(error);
//     res.status(500).json({ error: "Internal server error" });
//   }
// });

// // Route to scrape product title from a website
// router.get("/getInfo", async (req, res) => {
//   try {
//     const { title, buyLink } = req.body;

//     const [imageResponse, shoppingResponse] = await Promise.all([
//       axios.get(`https://www.google.com/search?q=${title}&tbm=isch`),
//       axios.get(`https://shopping.google.com/search?q=${title}`),
//     ]);

//     const $ = cheerio.load(imageResponse.data);
//     const imageUrls = [];
//     $("img").each((index, element) => {
//       if (index < 4) {
//         // Limit to the first 3 images
//         const imageUrl = $(element).attr("src");
//         imageUrls.push(imageUrl);
//       }
//     });

//     const $1 = cheerio.load(shoppingResponse.data);
//     const rating = $1(".pyOKtc").first().text();
//     const url = $1(".xUCO8b").first().attr("href");

//     const [productResponse, buyLinkResponse] = await Promise.all([
//       axios.get(url),
//       buyLink.includes("pricebefore.com")
//         ? axios.get(buyLink)
//         : Promise.resolve({ data: "" }),
//     ]);

//     const $2 = cheerio.load(productResponse.data);
//     const description = $2(".VOVcm").text();

//     const p = cheerio.load(buyLinkResponse.data);
//     const updatedBuyLink = buyLink.includes("pricebefore.com")
//       ? p(".buy-button a").attr("href") || ""
//       : buyLink;

//     res.json({
//       description: description,
//       ratings: rating,
//       images: imageUrls.slice(1, imageUrls.length),
//       buyLink: updatedBuyLink,
//     });
//   } catch (error) {
//     console.error(error);
//     res.status(500).json({ error: "An error occurred" });
//   }
// });














async function sendNotification() {
  const campaigns = await getCampaigns();
  const browser = await browserPromise;

  for (const campaign of campaigns) {
    const topic = campaign.title;
    const thresholdPrice = parseInt(campaign.price.replace(",", "").trim());

    console.log("Processing campaign:", topic);

    const {  price, img, buyLink, websiteLogo, offer } = await fetchProductInfo(topic);

    if (shouldSendNotification(price, thresholdPrice)) {
      console.log("Sending notification");

      const notificationMessage = {
        title: `The sale for ${topic} is on ðŸŽ‰`,
        body: "Check it out right now !",
        imageUrl: img,
      };

      const messageData = {
        price: price,
        title: topic,
        offer: offer,
        img: img,
        buyLink: buyLink,
        websiteLogo: websiteLogo,
        description: "",
      };

      await sendNotificationToTopic(topic, notificationMessage, messageData);
      await updateCampaignPrice(topic, price);
    } else {
      console.log("Not sending notification");
    }
  }
}

async function fetchProductInfo(topic) {
  const response = await axios.get(
    `https://pricee.com/api/v1/search.php?q=${encodeURI(topic)}&size=10&lang=en&vuid=0&platform=1`
  );
  const responseData = response.data;
  const items = responseData.data;

  if (items.length > 0) {
    const { title, url, source_logo, discount, source_price, image } = items[0];
    return {
      title: title,
      price: source_price,
      img: image,
      offer: `${discount}% off`,
      buyLink: url,
      websiteLogo: source_logo,
    };
  } else {
    return {
      title: "",
      price: "",
      img: "",
      offer: "",
      buyLink: "",
      websiteLogo: "",
    };
  }
}

function shouldSendNotification(currentPrice, thresholdPrice) {
  return parseInt(currentPrice.replace(",", "").trim()) < thresholdPrice;
}

async function sendNotificationToTopic(topic, message, data) {
  const messageObject = {
    topic: topic,
    notification: message,
    data: data,
  };

  try {
    await admin.messaging().send(messageObject);
    console.log("Notification sent for topic:", topic);
  } catch (error) {
    console.error("Error sending notification:", error);
  }
}

async function updateCampaignPrice(topic, newPrice) {
  const querySnapshot = await db.collection("campaigns").where("title", "==", topic).get();

  if (!querySnapshot.empty) {
    querySnapshot.docs.forEach((doc) => {
      doc.ref.update({ price: newPrice.replace(",", "").trim() });
    });

    console.log("Campaign price updated for topic:", topic);
  }
}


router.post("/unsubscribeFromTopic", async (req, res) => {
  try {
    const { token, topic } = req.body;
    let messagetitle = "";
    for (const i in topic) {
      if (i != "" || i != "/") {
        messagetitle += i;
      }
    }
    admin
      .messaging()
      .unsubscribeFromTopic(token, messagetitle)
      .then(() => {
        console.log("Unsubscribed from Topic Sucessfully");
      });

    res.sendStatus(200);
  } catch (error) {
    res.sendStatus(500);
  }
});


router.get("/getStores", async (req, res) => {
  console.log("Started...");
  try {
    const response = await axios.get(
      "https://flipshope.com/api/stores/trendstores"
    );
    const responseData = response.data;
    const items = responseData.data; // Assuming the array of items is stored in the "data" property of the response

    const extractedData = items.map((data) => ({
      img_url: data.img_url,
      url: data.url,
      store_url: data.store_url,
      store_id: data.store_id,
      store_page_url: data.store_page_url,
      store_name: data.store_name,
    }));

    res.json(extractedData);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Internal server error" });
  }
});

router.get("/getStoreCoupons", async (req, res) => {
  console.log("Started...");
  const { store } = req.body;
  console.log(store);
  try {
    const response = await axios.get(
      `https://flipshope.com/_next/data/wHnVSA0XP4h-4zh2w2Ln3/stores/${store}.json?`
    );
    const responseData = response.data;
    const items =
      responseData.pageProps.storeWithCouponsData.recentCouponsByStores; // Assuming the array of items is stored in the "data" property of the response

    const extractedData = items.map((data) => ({
      coupon_Code: data.Coupon_Code,
      coupon_Title: data.Coupon_Title,
      very_Short_Title: data.Very_Short_Title,
    }));

    res.json(extractedData);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Internal server error" });
  }
});
cron.schedule("0 9,14,18 * * *", () => {
  // Call your function
  sendNotification();
});
sendNotification();